setwd("C:/Users/eduar/Documents/GitHub/specialization_diversity_AF")
library (phytools)
library(tidyverse)
library(PupillometryR)
library(ggpubr)
library(readr)
library(tidyr)
library(ggplot2)
library(Hmisc)
library(plyr)
library(RColorBrewer)
library(reshape2)
### loading mcc phylogenetic tree
mcc = read.tree("0_data/mcc_phylo.nwk")
phylo_trees = read.tree("0_data/100_rand_phylos.nwk")
### loading geographic and niche sister data
sister_no_metrics = read.table("2_sister_hypervolume/sister_no_metrics.csv", sep=',', h=T)
sister_ro_metrics = read.table("3_sister_geography/sister_ro_metrics.csv", sep=',', h=T)
### loading occurrence count per domain
spp_count_domain = read.table("0_data/spp_count_domain.csv", h=T, sep=",")
# define geographic states
high_ths = 0.9
low_ths = (1 - high_ths)
geo_states = af_percentage = spp_count_domain$AF/ apply(spp_count_domain[,-1], MARGIN = 1, FUN=sum)
geo_states[af_percentage >= high_ths] = "AF"
geo_states[af_percentage <= low_ths] = "other"
geo_states[af_percentage > low_ths & af_percentage < high_ths] = "AFother"
names(geo_states) = spp_count_domain$species
# my colors
mycols = c( "#1E88E5", "#FFC107", "#D81B60")
### sister ro metrics
tiff("7_graphs/RO_intercept_geographic_distribution.tiff", units="in", width=3.5, height=3, res=600)
ggplot(data= sister_ro_metrics, aes(x=state, y=intercept_ro, fill= state)) +
geom_point(aes(color=state),position = position_jitter(width = 0.07), size = 1.5, alpha = 0.25) +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.50)+
geom_flat_violin(position = position_nudge(x = 0.12, y = 0), alpha = 0.50) +
scale_fill_manual(values=mycols)+
scale_colour_manual(values=mycols)+
xlab("geographic distribution")+ ylab("RO intercept")+
scale_x_discrete(labels=c("AF" = "AF-endemic", "AFother" = "AF and other\ndomains", "other" = "outside AF"))+
theme(panel.background=element_rect(fill="white"), panel.grid=element_line(colour=NULL),panel.border=element_rect(fill=NA,colour="black"),axis.title=element_text(size=14,face="bold"),axis.text.x=element_text(size=8),legend.position = "none")
dev.off()
llt_95_obj = ltt95(trees= phylo_trees, alpha=0.05, log=FALSE, method="lineages",mode="mean")
llt_95_obj = ltt95(trees= phylo_trees, alpha=0.05, log=FALSE,"negative", method="lineages",mode="mean")
llt_95_obj = ltt95(trees= phylo_trees, alpha=0.05, log=T,"negative", method="lineages",mode="mean")
llt_95_obj = ltt95(trees= phylo_trees, alpha=0.05, log=T,"flipped", method="lineages",mode="mean")
llt_95_obj = ltt95(trees= phylo_trees, alpha=0.05, log=T, method="lineages",mode="mean",
xaxis="flipped", shaded=T)
llt_95_obj = ltt95(trees= phylo_trees, alpha=0.05, log=F, method="lineages",mode="mean",
xaxis="flipped", shaded=T)
llt_95_obj = ltt95(trees= phylo_trees, alpha=0.05, log=F, method="lineages",mode="mean",
xaxis="flipped", shaded=T, bg="gray")
llt_95_obj = ltt95(trees= phylo_trees, alpha=0.05, log=F, method="lineages",mode="mean",
xaxis="negative", shaded=T, bg="gray")
llt_95_obj = ltt95(trees= phylo_trees, alpha=0.05, log=F, method="lineages",mode="mean",
res=1000, xaxis="negative", shaded=T, bg="gray")
llt_95_obj = ltt95(trees= phylo_trees, alpha=0.05, log=F, method="lineages",mode="mean",
res=10000, xaxis="negative", shaded=T, bg="gray")
llt_95_obj = ltt95(trees= phylo_trees, alpha=0.05, log=F, method="lineages",mode="mean",
res=1000, xaxis="negative", shaded=T, bg="gray")
llt_95_obj = ltt95(trees= phylo_trees, alpha=0.05, log=F, method="lineages",mode="mean",
res=20, xaxis="negative", shaded=T, bg="gray")
llt_95_obj = ltt95(trees= phylo_trees, alpha=0.05, log=F, method="lineages",mode="mean",
res=250, xaxis="negative", shaded=T, bg="gray")
llt_95_obj = ltt95(trees= phylo_trees, alpha=0.05, log=F, method="lineages",mode="mean",
res=500, xaxis="negative", shaded=T, bg="gray")
llt_95_obj = ltt95(trees= phylo_trees, alpha=0.05, log=F, method="lineages",mode="mean",
res=100, xaxis="negative", shaded=T, bg="gray")
### loading mcc phylogenetic tree
mcc = read.tree("0_data/mcc_phylo.nwk")
phylo_trees = read.tree("0_data/100_rand_phylos.nwk")
### loading species' hypervolumes
spp_hvolumes = read.table("1_hypervolume_inference/spp_hvolumes.csv", h=T, sep=",")
# named vector of hypervolumes
hvolumes = spp_hvolumes$hvolume
names(hvolumes) = spp_hvolumes$species
names(mycols) = c("AF", "AFother", "other")
plotTree.wBars(ladderize(mcc),hvolumes,type="phylogram",fsize=0.5, col="gray", lmethod="plotTree")
tiplabels(pie=geo_states, piecol=state_cols, cex=0.3)
plotTree.wBars(ladderize(mcc),hvolumes,type="phylogram",fsize=0.5, col="gray", lmethod="plotTree")
tiplabels(pie=geo_states, piecol=mycols, cex=0.3)
mycols
geo_states
plotTree.wBars(ladderize(mcc),hvolumes,type="phylogram",fsize=0.5, col="gray", lmethod="plotTree")
tiplabels(pie=geo_states, piecol=mycols, cex=0.3)
table(hvolumes)
table(geo_states)
# numeric geographic states
geo_state_num = geo_states
geo_state_num[geo_states == "AF"]
geo_state_num[geo_states == "AF"] =  1
geo_state_num[geo_states == "AFother"] =  0.5
geo_state_num[geo_states == "other"] =  0
geo_state_num = as.numeric(geo_state_num)
plotTree.wBars(ladderize(mcc), hvolumes, type="phylogram",fsize=0.5, col="gray", lmethod="plotTree")
tiplabels(pie=geo_states_num, piecol=mycols, cex=0.3)
# numeric geographic states
geo_state_num = geo_states
geo_state_num[geo_states == "AF"] =  1
geo_state_num[geo_states == "AFother"] =  0.5
geo_state_num[geo_states == "other"] =  0
geo_state_num = as.numeric(geo_state_num)
plotTree.wBars(ladderize(mcc), hvolumes, type="phylogram",fsize=0.5, col="gray", lmethod="plotTree")
tiplabels(pie=geo_states_num, piecol=mycols, cex=0.3)
geo_states
# numeric geographic states
geo_states_num = geo_states
geo_states_num[geo_states == "AF"] =  1
geo_states_num[geo_states == "AFother"] =  0.5
geo_states_num[geo_states == "other"] =  0
geo_states_num = as.numeric(geo_state_num)
plotTree.wBars(ladderize(mcc), hvolumes, type="phylogram",fsize=0.5, col="gray", lmethod="plotTree")
tiplabels(pie=geo_states_num, piecol=mycols, cex=0.3)
count(geo_states)
plotTree.wBars(ladderize(mcc), hvolumes, type="phylogram",fsize=0.5, col="gray", lmethod="plotTree")
tiplabels(pie=geo_states_num, pie=mycols[], cex=0.3)
plotTree.wBars(ladderize(mcc), hvolumes, type="phylogram",fsize=0.5, col="gray", lmethod="plotTree")
tiplabels(pie=geo_states_num, pie=mycols, cex=0.3)
# numeric geographic states
geo_states_num = geo_states
geo_states_num[geo_states == "AF"] =  "#1E88E5"
geo_states_num[geo_states == "AFother"] =  "#FFC107"
geo_states_num[geo_states == "other"] =  "#D81B60"
geo_states_num = as.numeric(geo_state_num)
# numeric geographic states
geo_states_num = geo_states
geo_states_num[geo_states == "AF"] =  "#1E88E5"
geo_states_num[geo_states == "AFother"] =  "#FFC107"
geo_states_num[geo_states == "other"] =  "#D81B60"
geo_states_num
plotTree.wBars(ladderize(mcc), hvolumes, type="phylogram",fsize=0.5, col="gray", lmethod="plotTree")
tiplabels(pie=geo_states_num, cex=0.3)
plotTree.wBars(ladderize(mcc), hvolumes, type="phylogram",fsize=0.5, col="gray", lmethod="plotTree")
tiplabels(piecol=geo_states_num, cex=0.3)
# numeric geographic states
geo_states_col = geo_states
geo_states_col[geo_states == "AF"] =  "#1E88E5"
geo_states_col[geo_states == "AFother"] =  "#FFC107"
geo_states_col[geo_states == "other"] =  "#D81B60"
plotTree.wBars(ladderize(mcc), hvolumes, type="phylogram",fsize=0.5, col="gray", lmethod="plotTree")
tiplabels(pie=geo_states, piecol=geo_states_col, cex=0.3)
geo_states_col
plotTree.wBars(ladderize(mcc), hvolumes, type="phylogram",fsize=0.5, col="gray", lmethod="plotTree")
tiplabels(pie=geo_states, cex=0.3)
geo_states
length(unique(geo_states))
matrix(0, ncol= length(unique(geo_states)), nrow= length=mcc)
matrix(0, ncol= length(unique(geo_states)), nrow= length(mcc) )
length(mcc)
mcc
matrix(0, ncol= length(unique(geo_states)), nrow= length(mcc$tip.label) )
# geographic state matrix
geo_state_matrix = matrix(0, ncol= length(unique(geo_states)), nrow= length(mcc$tip.label) )
geo_state_matrix = matrix(0, ncol= length(unique(geo_states)), nrow= length(mcc$tip.label) )
for(i in lenght(mcc$tip.label)){
if (geo_state[i] == "AF"){
geo_state_matrix[i,1] = 1
} if (geo_state[i] == "AFother"){
geo_state_matrix[i,2] = 1
} if (geo_state[i] == "other"){
geo_state_matrix[i,3] = 1
}
}
i
for(i in 1:lenght(mcc$tip.label)){
if (geo_state[i] == "AF"){
geo_state_matrix[i,1] = 1
} if (geo_state[i] == "AFother"){
geo_state_matrix[i,2] = 1
} if (geo_state[i] == "other"){
geo_state_matrix[i,3] = 1
}
}
1:lenght(mcc$tip.label)
1:length(mcc$tip.label)
for(i in 1:length(mcc$tip.label)){
if (geo_state[i] == "AF"){
geo_state_matrix[i,1] = 1
} if (geo_state[i] == "AFother"){
geo_state_matrix[i,2] = 1
} if (geo_state[i] == "other"){
geo_state_matrix[i,3] = 1
}
}
i
1:length(mcc$tip.label)
for(i in 1:length(mcc$tip.label) ){
if (geo_states[i] == "AF"){
geo_state_matrix[i,1] = 1
} if (geo_states[i] == "AFother"){
geo_state_matrix[i,2] = 1
} if (geo_states[i] == "other"){
geo_state_matrix[i,3] = 1
}
}
eo_states
geo_states
mcc$tip.label
geo_state_matrix = matrix(0, ncol= length(unique(geo_states)), nrow= length(mcc$tip.label) )
for(sp_name in mcc$tip.label ){
if (geo_states[sp_name] == "AF"){
geo_state_matrix[i,1] = 1
} if (geo_states[i] == "AFother"){
geo_state_matrix[i,2] = 1
} if (geo_states[i] == "other"){
geo_state_matrix[i,3] = 1
}
}
sp_name
mcc$tip.label
geo_state_matrix
mcc$tip.label
for(sp_name in mcc$tip.label ){
print(sp_name)
}
geo_states[sp_name]
geo_states[sp_name] == "AF"
cbind(mcc$tip.label, geo_state_matrix)
which(mcc$tip.label == sp_name)
for(sp_name in mcc$tip.label ){
n = which(mcc$tip.label == sp_name)
if (geo_states[sp_name] == "AF"){
geo_state_matrix[n,1] = 1
} if (geo_states[sp_name] == "AFother"){
geo_state_matrix[n,2] = 1
} if (geo_states[sp_name] == "other"){
geo_state_matrix[n,3] = 1
}
}
geo_state_matrix = matrix(0, ncol= length(unique(geo_states)), nrow= length(mcc$tip.label) )
for(sp_name in mcc$tip.label ){
n = which(mcc$tip.label == sp_name)
if (geo_states[sp_name] == "AF"){
geo_state_matrix[n,1] = 1
} else (geo_states[sp_name] == "AFother"){
geo_state_matrix[n,2] = 1
} else (geo_states[sp_name] == "other"){
geo_state_matrix[n,3] = 1
}
}
geo_state_matrix
(geo_states[sp_name] == "AF")
geo_state_matrix = matrix(0, ncol= length(unique(geo_states)), nrow= length(mcc$tip.label) )
for(sp_name in mcc$tip.label ){
n = which(mcc$tip.label == sp_name)
if (geo_states[sp_name] == "AF"){
geo_state_matrix[n,1] = 1
}
}
geo_state_matrix
# geographic state matrix
geo_state_matrix = matrix(0, ncol= length(unique(geo_states)), nrow= length(mcc$tip.label) )
for(sp_name in mcc$tip.label ){
n = which(mcc$tip.label == sp_name)
if (geo_states[sp_name] == "AF"){
geo_state_matrix[n,1] = 1
}
if (geo_states[sp_name] == "AFother"){
geo_state_matrix[n,2] = 1
}
if (geo_states[sp_name] == "other"){
geo_state_matrix[n,3] = 1
}
}
geo_state_matrix
colnames(geo_state_matrix) =  c("AF", "AFother", "other")
plotTree.wBars(ladderize(mcc), hvolumes, type="phylogram",fsize=0.5, col="gray", lmethod="plotTree")
tiplabels(pie=geo_state_matrix,piecol=mycols,  cex=0.3)
plotTree.wBars(ladderize(mcc), hvolumes, type="phylogram",fsize=0.5, col="gray", lmethod="plotTree")
tiplabels(pie=geo_state_matrix,piecol=mycols,  cex=0.5)
plotTree.wBars(ladderize(mcc), hvolumes, type="phylogram",fsize=0.5, col="gray", lmethod="plotTree")
tiplabels(pie=geo_state_matrix,piecol=mycols,  cex=0.4)
plotTree.wBars(ladderize(mcc), hvolumes, type="phylogram",fsize=0.5, col="gray", lmethod="plotTree")
tiplabels(pie=geo_state_matrix,piecol=mycols,  cex=0.4)
axisPhylo(pos=c(0.5), font=3, cex.axis=0.5)
tiff("7_graphs/mcc_geostates_hvolumes.tiff", units="in", width=4, height=6, res=600)
plotTree.wBars(ladderize(mcc), hvolumes, type="phylogram",fsize=0.5, col="gray", lmethod="plotTree")
tiplabels(pie=geo_state_matrix,piecol=mycols,  cex=0.4)
axisPhylo(pos=c(0.5), font=3, cex.axis=0.5)
dev.off()
tiff("7_graphs/mcc_phylo_tree.tiff", units="in", width=4, height=6, res=600)
plotTree.wBars(ladderize(mcc), hvolumes, type="phylogram",fsize=0.5, col="gray", lmethod="plotTree")
tiplabels(pie=geo_state_matrix,piecol=mycols,  cex=0.4)
axisPhylo(pos=c(0.5), font=3, cex.axis=0.5)
dev.off()
tiff("7_graphs/ltt_95.tiff", units="in", width=4, height=3, res=600)
llt_95_obj = ltt95(trees= phylo_trees, alpha=0.05, log=F, method="lineages",mode="mean",
res=100, xaxis="negative", shaded=T, bg="gray")
dev.off()
llt_95_obj = ltt95(trees= phylo_trees, alpha=0.05, log=T, method="lineages",mode="mean",
res=100, xaxis="negative", shaded=T, bg="gray")
tiff("7_graphs/ltt_95_ln.tiff", units="in", width=4, height=3, res=600)
llt_95_obj = ltt95(trees= phylo_trees, alpha=0.05, log=T, method="lineages",mode="mean",
res=100, xaxis="negative", shaded=T, bg="gray")
dev.off()
tiff("7_graphs/mcc_phylo_tree.tiff", units="in", width=3.5, height=4, res=600)
plotTree.wBars(ladderize(mcc), hvolumes, type="phylogram",fsize=0.5, col="gray", lmethod="plotTree")
tiplabels(pie=geo_state_matrix,piecol=mycols,  cex=0.4)
axisPhylo(pos=c(0.5), font=3, cex.axis=0.5)
dev.off()
tiff("7_graphs/ltt_95_ln.tiff", units="in", width=3.5, height=3, res=600)
llt_95_obj = ltt95(trees= phylo_trees, alpha=0.05, log=T, method="lineages",mode="mean",
res=100, xaxis="negative", shaded=T, bg="gray")
dev.off()
tiff("7_graphs/ltt_95_ln.tiff", units="in", width=5, height=2, res=600)
llt_95_obj = ltt95(trees= phylo_trees, alpha=0.05, log=T, method="lineages",mode="mean",
res=100, xaxis="negative", shaded=T, bg="gray")
dev.off()
tiff("7_graphs/ltt_95_ln.tiff", units="in", width=5, height=3, res=600)
llt_95_obj = ltt95(trees= phylo_trees, alpha=0.05, log=T, method="lineages",mode="mean",
res=100, xaxis="negative", shaded=T, bg="gray")
dev.off()
