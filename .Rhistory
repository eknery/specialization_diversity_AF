### pick a phylogenetic tree
one_tree = phylo_trees[[i]]
### starting parameter values and linear function
start_quasse = starting.point.quasse(one_tree, states=trait_values)
xr = c(range(trait_values) + c(-1,1)*start_quasse["diffusion"])
linear.x = make.linear.x(x0=xr[1], x1=xr[2])
### setting quasse functions
# constant
const =  constrain(make.quasse(one_tree, states=trait_values, states.sd=se_trait , lambda=constant.x, mu=constant.x, sampling.f=0.9), drift~0)
# linear lambda
l_lin = constrain(make.quasse(one_tree,  states=trait_values, states.sd=se_trait , lambda=linear.x, mu=constant.x, sampling.f=0.9), drift~0)
# linear lambda and mu
lm_lin = constrain(make.quasse(one_tree, states=trait_values, states.sd=se_trait , lambda=linear.x, mu=linear.x, sampling.f=0.9), drift~0)
### optimization
## constant
# initial values
init_const = c(start_quasse[1], start_quasse[2], start_quasse[3])
lower_const = c(0,0,0)
names(lower_const) = names(init_const) = argnames(const)
# finding constant mle
mle_const = find.mle(const, x.init=init_const, lower=lower_const, control=control)
const_params = rbind(const_params, mle_const$par)
## linear lambda
# initial values
init_l_lin = c(mle_const$par[1], 0.01, mle_const$par[2], mle_const$par[3])
names(init_l_lin) = argnames(l_lin)
# finding mle
mle_l_lin = find.mle(l_lin, x.init=init_l_lin, control=control)
l_lin_params = rbind(l_lin_params, mle_l_lin$par)
## linear lambda and mu
#initial values
init_lm_lin = c(mle_const$par[1], 0.01, mle_const$par[2], 0.01*mle_const$par[2], mle_const$par[3])
names(init_lm_lin) = argnames(lm_lin)
# finding mle
mle_lm_lin = find.mle(lm_lin, x.init=init_lm_lin, control=control)
lm_lin_params= rbind(lm_lin_params, mle_lm_lin$par)
### summarizing model fit
const_fit = c(lnlik= mle_const$lnLik, n_par=length(mle_const$par))
l_lin_fit = c(mle_l_lin$lnLik, length(mle_l_lin$par))
lm_lin_fit = c(mle_lm_lin$lnLik, length(mle_lm_lin$par))
fit_values = rbind(const_fit, l_lin_fit, lm_lin_fit)
model_fit_list[[i]] = fit_values
### update!
print(paste("Time:", Sys.time(), "Loop iterarion:", as.character(i) ) )
}
### arranging into dara frame
model_fit_df = data.frame()
for (i in 1:length(model_fit_list)){
model_fit_df = rbind(model_fit_df, model_fit_list[[i]])
}
### AIC = -2(log-likelihood) + 2K
aic = (2*model_fit_df$n_par) - (2*model_fit_df$lnlik)
### AiCc = AIC - 2k(k+1) / (n-k-1)
aicc = aic + (((2*model_fit_df$n_par)*(model_fit_df$n_par+1))/(66-model_fit_df$n_par-1))
### adding
model_fit_df = data.frame(model_fit_df, aic, aicc)
### exporting
write.table(model_fit_df, "6_quasse/quasse_model_fit_df.csv", sep=",", quote=F, row.names = T)
write.table(const_params, "6_quasse/const_params.csv", sep=",", quote=F, row.names = F)
write.table(l_lin_params, "6_quasse/l_lin_params.csv", sep=",", quote=F, row.names = F)
write.table(lm_lin_params, "6_quasse/lm_lin_params.csv", sep=",", quote=F, row.names = F)
model_fit_df= read.table("6_quasse/quasse_model_fit_df.csv", sep=",", h = T)
best_fit_per_tree =c()
index = seq(1, 298, by =3)
for (i in index){
one_set = model_fit_df[i:(i+2),]
first_lowest = one_set[one_set$aicc==min(one_set$aicc),]
minus_first = one_set[-which(one_set$aicc==min(one_set$aicc) ),]
second_lowest = minus_first[minus_first$aicc==min(minus_first$aicc),]
if (second_lowest$aicc - first_lowest$aicc < 2){
best_fit_per_tree = rbind(best_fit_per_tree, second_lowest)
} else {
best_fit_per_tree = rbind(best_fit_per_tree, first_lowest)
}
}
model_name = c()
for(i in 1:nrow(best_fit_per_tree)){
str_names = strsplit(rownames(best_fit_per_tree), '_')
model_name = c(model_name, str_names[[i]][1])
}
best_fit_models = data.frame(model_name, best_fit_per_tree)
table(best_fit_models$model_name)
### exporting
write.table(best_fit_models, "6_quasse/quasse_best_fit_models.csv", sep=",", quote=F, row.names = F)
#################### summarizing best model estimates #########################
best_fit_models = read.table("6_quasse/quasse_best_fit_models.csv", sep=",", h = T)
const_params = read.table("6_quasse/const_params.csv", sep=",",  h = T)
l_lin_params = read.table("6_quasse/l_lin_params.csv", sep=",",  h = T)
lm_lin_params = read.table("6_quasse/lm_lin_params.csv", sep=",", h = T)
### most common model
most_repeated = max(table(best_fit_models$model_name))
common_model = names(which(table(best_fit_models$model_name) == most_repeated) )
common_scenario = which(best_fit_models$model_name == common_model)
common_params = lm_lin_params[common_scenario,]
### descriptive statistics
apply(common_params, MARGIN = 2, FUN=mean)
apply(common_params, MARGIN = 2, FUN=sd)
apply(common_params, MARGIN = 2, FUN= function(x){ 1.96(sd(x)/sqrt(length(x)))})
apply(common_params, MARGIN = 2, FUN= function(x){ 1.96* ( sd(x)/sqrt( length(x) ) ) } )
#################### summarizing best model estimates #########################
best_fit_models = read.table("4_geosse/geosse_best_fit_models.csv", sep=",", h = T)
d_params = read.table("4_geosse/d_params.csv", sep=",",  h = T)
sd_params = read.table("4_geosse/sd_params.csv", sep=",",  h = T)
sxd_params = read.table("4_geosse/sxd_params.csv", sep=",", h = T)
### most common model
most_repeated = max(table(best_fit_models$model_name))
common_model = names(which(table(best_fit_models$model_name) == most_repeated) )
common_scenario = which(best_fit_models$model_name == common_model)
common_params = sd_params[common_scenario,]
common_params
most_repeated
common_model
common_scenario
### effect measure
common_params$sB - common_params$sA
### effect measure
(common_params$sB - common_params$sA) / common_params$sA
(common_params$sB - common_params$sA)
### effect measure
rel_s_diff= (common_params$sB - common_params$sA) / common_params$sA
### descriptive statistics
mean(rel_s_diff)
ci_calculator = function(x){ 1.96* ( sd(x)/sqrt( length(x) ) ) } )
ci_calculator = function(x){ 1.96* ( sd(x)/sqrt( length(x) ) ) }
ci_calculator(rel_s_diff)
#################### summarizing best model estimates #########################
best_fit_models = read.table("5_geosse_time/geosse_time_best_fit_models.csv", sep=",", h = T)
d_lin_params = read.table("5_geosse_time/d_lin_params.csv", sep=",",  h = T)
sd_s_lin_params = read.table("5_geosse_time/sd_s_lin_params.csv", sep=",",  h = T)
sxd_sx_lin_params = read.table("5_geosse_time/sxd_sx_lin_params.csv", sep=",", h = T)
### most common model
most_repeated = max(table(best_fit_models$model_name))
common_model = names(which(table(best_fit_models$model_name) == most_repeated) )
common_scenario = which(best_fit_models$model_name == common_model)
common_params = sd_s_lin_params[common_scenario,]
### descriptive statistics
apply(common_params, MARGIN = 2, FUN=mean)
apply(common_params, MARGIN = 2, FUN= function(x){ 1.96* ( sd(x)/sqrt( length(x) ) ) } )
sd_params = read.table("4_geosse/sd_params.csv", sep=",",  h = T)
### loading fit values and model parameters
best_fit_models = read.table("4_geosse/geosse_best_fit_models.csv", sep=",", h = T)
sd_params = read.table("4_geosse/sd_params.csv", sep=",",  h = T)
### most common model
most_repeated = max(table(best_fit_models$model_name))
common_model = names(which(table(best_fit_models$model_name) == most_repeated) )
common_scenario = which(best_fit_models$model_name == common_model)
common_params = sd_params[common_scenario,]
common_params
rep("AF", length(common_params$sA))
###
state = c(rep("other", length(common_params$sA)),rep("AF", length(common_params$sB)))
state
s_estimates = c(common_params$sA, common_params$sB)
s_df = data.frame(state, s_estimates)
s_df
aggregate(s_df$s_estimates, by= list(s_df$state), mean)
mean_s = aggregate(s_df$s_estimates, by= list(s_df$state), mean)
ci_s = aggregate(s_df$s_estimates, by= list(s_df$state), ci_calculator)
ci_s
data.frame(mean_s, ci_s$x)
mean_s_df = data.frame(mean_s, ci_s$x)
colnames(mean_s_df) = c("state", "mean_s", "ci_s")
### plotting
# axis title size
axis_title_size = 10
# axis names
x_axis_name = "geographic distribution"
y_axis_name = "lambda"
ggplot(mean_s_df, aes(x= state, y =mean_s, color=state)) +
xlab(x_axis_name)+ ylab(y_axis_name)+
theme(panel.background=element_rect(fill="white"), panel.grid=element_line(colour=NULL),panel.border=element_rect(fill=NA,colour="black"),axis.title=element_text(size=axis_title_size ,face="bold"),axis.text=element_text(size=6),legend.position = "none")
library(rexpokit)
library(cladoRcpp)
library(BioGeoBEARS)
library(phytools)
library(tidyverse)
library(PupillometryR)
library(ggpubr)
library(readr)
library(tidyr)
library(ggplot2)
library(Hmisc)
library(plyr)
library(RColorBrewer)
library(reshape2)
ggplot(mean_s_df, aes(x= state, y =mean_s, color=state)) +
xlab(x_axis_name)+ ylab(y_axis_name)+
theme(panel.background=element_rect(fill="white"), panel.grid=element_line(colour=NULL),panel.border=element_rect(fill=NA,colour="black"),axis.title=element_text(size=axis_title_size ,face="bold"),axis.text=element_text(size=6),legend.position = "none")
ggplot(mean_s_df, aes(x= state, y =mean_s, color=state)) +
geom_point()
xlab(x_axis_name)+ ylab(y_axis_name)+
theme(panel.background=element_rect(fill="white"), panel.grid=element_line(colour=NULL),panel.border=element_rect(fill=NA,colour="black"),axis.title=element_text(size=axis_title_size ,face="bold"),axis.text=element_text(size=6),legend.position = "none")
### loading fit values and model parameters
best_fit_models = read.table("5_geosse_time/geosse_time_best_fit_models.csv", sep=",", h = T)
ggplot(mean_s_df, aes(x= state, y =mean_s, color=state)) +
geom_point() +
xlab(x_axis_name)+ ylab(y_axis_name)+
theme(panel.background=element_rect(fill="white"), panel.grid=element_line(colour=NULL),panel.border=element_rect(fill=NA,colour="black"),axis.title=element_text(size=axis_title_size ,face="bold"),axis.text=element_text(size=6),legend.position = "none")
### loading fit values and model parameters
best_fit_models = read.table("5_geosse_time/geosse_time_best_fit_models.csv", sep=",", h = T)
ggplot(mean_s_df, aes(x= state, y =mean_s, color=state)) +
geom_errorbar(data=mean_s_df, mapping=aes(x=mean_s, ymin=mean_s-ci_s, ymax=mean_s+ci_s)+
theme(panel.background=element_rect(fill="white"), panel.grid=element_line(colour=NULL),panel.border=element_rect(fill=NA,colour="black"),axis.title=element_text(size=axis_title_size ,face="bold"),axis.text=element_text(size=6),legend.position = "none")
ggplot(mean_s_df, aes(x= state, y =mean_s, color=state)) +
### loading fit values and model parameters
best_fit_models = read.table("5_geosse_time/geosse_time_best_fit_models.csv", sep=",", h = T)
sd_s_lin_params = read.table("5_geosse_time/sd_s_lin_params.csv", sep=",",  h = T)
### most common model
most_repeated = max(table(best_fit_models$model_name))
frequent_model = names(which(table(best_fit_models$model_name) == most_repeated) )
ggplot(mean_s_df, aes(x= state, y =mean_s, color=state)) +
geom_point() +
geom_errorbar(data=mean_s_df, mapping=aes(x=mean_s, ymin=mean_s-ci_s, ymax=mean_s+ci_s))+
xlab(x_axis_name)+ ylab(y_axis_name)+
theme(panel.background=element_rect(fill="white"), panel.grid=element_line(colour=NULL),panel.border=element_rect(fill=NA,colour="black"),axis.title=element_text(size=axis_title_size ,face="bold"),axis.text=element_text(size=6),legend.position = "none")
ggplot(mean_s_df, aes(x= state, y =mean_s, color=state)) +
geom_point() +
geom_errorbar(data=mean_s_df, mapping=aes(x=mean_s, ymin=mean_s-ci_s, ymax=mean_s+ci_s))+
xlab(x_axis_name)+ ylab(y_axis_name)+
theme(panel.background=element_rect(fill="white"), panel.grid=element_line(colour=NULL),panel.border=element_rect(fill=NA,colour="black"),axis.title=element_text(size=axis_title_size ,face="bold"),axis.text=element_text(size=6),legend.position = "none")
ggplot(mean_s_df, aes(x= state, y =mean_s, color=state)) +
geom_point(aes(x= state)) +
geom_errorbar(data=mean_s_df, mapping=aes(x=mean_s, ymin=mean_s-ci_s, ymax=mean_s+ci_s))+
xlab(x_axis_name)+ ylab(y_axis_name)+
theme(panel.background=element_rect(fill="white"), panel.grid=element_line(colour=NULL),panel.border=element_rect(fill=NA,colour="black"),axis.title=element_text(size=axis_title_size ,face="bold"),axis.text=element_text(size=6),legend.position = "none")
### loading fit values and model parameters
best_fit_models = read.table("5_geosse_time/geosse_time_best_fit_models.csv", sep=",", h = T)
sd_s_lin_params = read.table("5_geosse_time/sd_s_lin_params.csv", sep=",",  h = T)
ggplot(mean_s_df, aes(color=state)) +
geom_point(mapping=aes(x=state, y=mean_s)) +
geom_errorbar(data=mean_s_df, mapping=aes(x=mean_s, ymin=mean_s-ci_s, ymax=mean_s+ci_s))+
xlab(x_axis_name)+ ylab(y_axis_name)+
theme(panel.background=element_rect(fill="white"), panel.grid=element_line(colour=NULL),panel.border=element_rect(fill=NA,colour="black"),axis.title=element_text(size=axis_title_size ,face="bold"),axis.text=element_text(size=6),legend.position = "none")
ggplot(mean_s_df, aes(color=state)) +
geom_point(data=mean_s_df,mapping=aes(x=state, y=mean_s)) +
geom_errorbar(data=mean_s_df, mapping=aes(x=mean_s, ymin=mean_s-ci_s, ymax=mean_s+ci_s))+
xlab(x_axis_name)+ ylab(y_axis_name)+
theme(panel.background=element_rect(fill="white"), panel.grid=element_line(colour=NULL),panel.border=element_rect(fill=NA,colour="black"),axis.title=element_text(size=axis_title_size ,face="bold"),axis.text=element_text(size=6),legend.position = "none")
### loading fit values and model parameters
best_fit_models = read.table("5_geosse_time/geosse_time_best_fit_models.csv", sep=",", h = T)
ggplot() +
geom_point(data=mean_s_df,mapping=aes(x=state, y=mean_s)) +
geom_errorbar(data=mean_s_df, mapping=aes(x=mean_s, ymin=mean_s-ci_s, ymax=mean_s+ci_s))+
xlab(x_axis_name)+ ylab(y_axis_name)+
theme(panel.background=element_rect(fill="white"), panel.grid=element_line(colour=NULL),panel.border=element_rect(fill=NA,colour="black"),axis.title=element_text(size=axis_title_size ,face="bold"),axis.text=element_text(size=6),legend.position = "none")
ggplot() +
geom_point(data=mean_s_df,mapping=aes(x=state, y=mean_s)) +
geom_errorbar(data=mean_s_df, mapping=aes(x=state, ymin=mean_s-ci_s, ymax=mean_s+ci_s))+
xlab(x_axis_name)+ ylab(y_axis_name)+
theme(panel.background=element_rect(fill="white"), panel.grid=element_line(colour=NULL),panel.border=element_rect(fill=NA,colour="black"),axis.title=element_text(size=axis_title_size ,face="bold"),axis.text=element_text(size=6),legend.position = "none")
# my colors
mycols = c( "#1E88E5", "#FFC107", "#D81B60")
names(mycols) = c("AF", "AFother", "other")
ggplot() +
geom_point(data=mean_s_df,mapping=aes(x=state, y=mean_s)) +
geom_errorbar(data=mean_s_df, mapping=aes(x=state, ymin=mean_s-ci_s, ymax=mean_s+ci_s))+
scale_colour_manual(values=mycols)+
xlab(x_axis_name)+ ylab(y_axis_name)+
theme(panel.background=element_rect(fill="white"), panel.grid=element_line(colour=NULL),panel.border=element_rect(fill=NA,colour="black"),axis.title=element_text(size=axis_title_size ,face="bold"),axis.text=element_text(size=6),legend.position = "none")
ggplot(aes(color=state)) +
geom_point(data=mean_s_df,mapping=aes(x=state, y=mean_s)) +
geom_errorbar(data=mean_s_df, mapping=aes(x=state, ymin=mean_s-ci_s, ymax=mean_s+ci_s))+
scale_colour_manual(values=mycols)+
xlab(x_axis_name)+ ylab(y_axis_name)+
theme(panel.background=element_rect(fill="white"), panel.grid=element_line(colour=NULL),panel.border=element_rect(fill=NA,colour="black"),axis.title=element_text(size=axis_title_size ,face="bold"),axis.text=element_text(size=6),legend.position = "none")
ggplot(aes(color=state)) +
geom_point(data=mean_s_df,mapping=aes(x=state, y=mean_s)) +
geom_errorbar(data=mean_s_df, mapping=aes(x=state, ymin=mean_s-ci_s, ymax=mean_s+ci_s))+
scale_colour_manual(values=mycols[-2])+
xlab(x_axis_name)+ ylab(y_axis_name)+
theme(panel.background=element_rect(fill="white"), panel.grid=element_line(colour=NULL),panel.border=element_rect(fill=NA,colour="black"),axis.title=element_text(size=axis_title_size ,face="bold"),axis.text=element_text(size=6),legend.position = "none")
ggplot(data=mean_s_df, aes(color=state)) +
geom_point(data=mean_s_df,mapping=aes(x=state, y=mean_s)) +
geom_errorbar(data=mean_s_df, mapping=aes(x=state, ymin=mean_s-ci_s, ymax=mean_s+ci_s))+
scale_colour_manual(values=mycols[-2])+
xlab(x_axis_name)+ ylab(y_axis_name)+
theme(panel.background=element_rect(fill="white"), panel.grid=element_line(colour=NULL),panel.border=element_rect(fill=NA,colour="black"),axis.title=element_text(size=axis_title_size ,face="bold"),axis.text=element_text(size=6),legend.position = "none")
ggplot(data=mean_s_df, aes(color=state)) +
geom_point(data=mean_s_df,mapping=aes(x=state, y=mean_s)) +
geom_errorbar(data=mean_s_df, size=1, width=0,mapping=aes(x=state, ymin=mean_s-ci_s, ymax=mean_s+ci_s))+
scale_colour_manual(values=mycols[-2])+
xlab(x_axis_name)+ ylab(y_axis_name)+
theme(panel.background=element_rect(fill="white"), panel.grid=element_line(colour=NULL),panel.border=element_rect(fill=NA,colour="black"),axis.title=element_text(size=axis_title_size ,face="bold"),axis.text=element_text(size=6),legend.position = "none")
ggplot(data=mean_s_df, aes(color=state)) +
geom_point(data=mean_s_df,mapping=aes(x=state, y=mean_s)) +
geom_errorbar(data=mean_s_df, size=1, width=0.5,mapping=aes(x=state, ymin=mean_s-ci_s, ymax=mean_s+ci_s))+
scale_colour_manual(values=mycols[-2])+
xlab(x_axis_name)+ ylab(y_axis_name)+
theme(panel.background=element_rect(fill="white"), panel.grid=element_line(colour=NULL),panel.border=element_rect(fill=NA,colour="black"),axis.title=element_text(size=axis_title_size ,face="bold"),axis.text=element_text(size=6),legend.position = "none")
ggplot(data=mean_s_df, aes(color=state)) +
geom_point(data=mean_s_df,mapping=aes(x=state, y=mean_s)) +
geom_errorbar(data=mean_s_df, size=1, width=0.1,mapping=aes(x=state, ymin=mean_s-ci_s, ymax=mean_s+ci_s))+
scale_colour_manual(values=mycols[-2])+
xlab(x_axis_name)+ ylab(y_axis_name)+
theme(panel.background=element_rect(fill="white"), panel.grid=element_line(colour=NULL),panel.border=element_rect(fill=NA,colour="black"),axis.title=element_text(size=axis_title_size ,face="bold"),axis.text=element_text(size=6),legend.position = "none")
ggplot(data=mean_s_df, aes(color=state)) +
geom_point(data=mean_s_df,mapping=aes(x=state, y=mean_s)) +
geom_errorbar(data=mean_s_df, size=1, width=0.1,mapping=aes(x=state, ymin=mean_s-ci_s, ymax=mean_s+ci_s))+
scale_colour_manual(values=mycols[-2])+
scale_x_discrete(labels=c("AF" = "AF-endemic", "other" = "outside AF"))+
xlab(x_axis_name)+ ylab(y_axis_name)+
theme(panel.background=element_rect(fill="white"), panel.grid=element_line(colour=NULL),panel.border=element_rect(fill=NA,colour="black"),axis.title=element_text(size=axis_title_size ,face="bold"),axis.text=element_text(size=6),legend.position = "none")
### plotting
# axis title size
axis_title_size = 10
# axis names
x_axis_name = "geographic distribution"
y_axis_name = "lambda"
geo_plot= ggplot(data=mean_s_df, aes(color=state)) +
geom_point(data=mean_s_df,mapping=aes(x=state, y=mean_s)) +
geom_errorbar(data=mean_s_df, size=1, width=0.1,mapping=aes(x=state, ymin=mean_s-ci_s, ymax=mean_s+ci_s))+
scale_colour_manual(values=mycols[-2])+
scale_x_discrete(labels=c("AF" = "AF-endemic", "other" = "outside AF"))+
xlab(x_axis_name)+ ylab(y_axis_name)+
theme(panel.background=element_rect(fill="white"), panel.grid=element_line(colour=NULL),panel.border=element_rect(fill=NA,colour="black"),axis.title=element_text(size=axis_title_size ,face="bold"),axis.text=element_text(size=6),legend.position = "none")
tiff("7_graphs/geosse_estimates.tiff", units="cm", width=7, height=6, res=600)
geo_plot
dev.off()
### loading fit values and model parameters
best_fit_models = read.table("5_geosse_time/geosse_time_best_fit_models.csv", sep=",", h = T)
sd_s_lin_params = read.table("5_geosse_time/sd_s_lin_params.csv", sep=",",  h = T)
### most common model
most_repeated = max(table(best_fit_models$model_name))
frequent_model = names(which(table(best_fit_models$model_name) == most_repeated) )
frequent_model_n = which(best_fit_models$model_name == frequent_model)
frequent_model_params = sd_s_lin_params[frequent_model_n,]
### common values
x1 = rep(0, nrow(frequent_model_params))
xend = rep(3.5, nrow(frequent_model_params))
y_lim=c(0,1)
## sA line estimates = other
intercepts_a = frequent_model_params$sA.c
angulars_a = frequent_model_params$sA.m
lines_a = data.frame(x1, xend, y1= intercepts_a, yend = xend*angulars_a + intercepts_a)
# mean line
mean_line_a = apply(lines_a, MARGIN = 2, FUN= mean)
# confidence interval lines
ci_line_a = apply(lines_a, MARGIN = 2, FUN= sd) /  sqrt(nrow(lines_a))*1.96
ci_line_a_up = mean_line_a + ci_line_a
ci_line_a_dw =  mean_line_a - ci_line_a
# dataframe mean line est
lines_a_df = data.frame(rbind(mean_line_a, ci_line_a_up, ci_line_a_dw))
## sB line estimates = AF
intercepts_b = frequent_model_params$sB.c
angulars_b = frequent_model_params$sB.m
lines_b = data.frame(x1, xend, y1= intercepts_b, yend = xend*angulars_b + intercepts_b)
# mean line
mean_line_b = apply(lines_b, MARGIN = 2, FUN= mean)
# confidence interval lines
ci_line_b = apply(lines_b, MARGIN = 2, FUN= sd) /  sqrt(nrow(lines_b))*1.96
ci_line_b_up = mean_line_b + ci_line_b
ci_line_b_dw =  mean_line_b - ci_line_b
# dataframe mean line est
lines_b_df = data.frame(rbind(mean_line_b, ci_line_b_up, ci_line_b_dw))
## sAB line estimates = AF and other
intercepts_ab = frequent_model_params$sAB.c
angulars_ab = frequent_model_params$sAB.m
lines_ab = data.frame(x1, xend, y1= intercepts_ab, yend = xend*angulars_ab + intercepts_ab)
# mean line
mean_line_ab = apply(lines_ab, MARGIN = 2, FUN= mean)
# confidence interval lines
ci_line_ab = apply(lines_ab, MARGIN = 2, FUN= sd) /  sqrt(nrow(lines_ab))*1.96
ci_line_ab_up = mean_line_ab + ci_line_ab
ci_line_ab_dw =  mean_line_ab - ci_line_ab
# dataframe mean line est
lines_ab_df = data.frame(rbind(mean_line_ab, ci_line_ab_up, ci_line_ab_dw))
# make time negative
lines_a_df$xend = lines_b_df$xend = lines_ab_df$xend  = rep(-3.5,length(lines_a_df$xend))
### plotting
# axis title size
axis_title_size = 10
# axis names
x_axis_name = "time before present (m.y.a.)"
y_axis_name = "lambda"
ggplot() +
geom_segment(data = lines_a_df[1,], color=mycols[3], size=0.75, alpha=1,  aes(x = x1, y = y1, xend = xend, yend = yend), inherit.aes = FALSE)+
geom_segment(data = lines_a_df[2,], color=mycols[3], size=0.5, alpha=0.5,  aes(x = x1, y = y1, xend = xend, yend = yend))+
geom_segment(data = lines_a_df[3,], color=mycols[3], size=0.5, alpha=0.5,  aes(x = x1, y = y1, xend = xend, yend = yend))+
geom_segment(data = lines_b_df[1,], color=mycols[1], size=0.75, alpha=1,  aes(x = x1, y = y1, xend = xend, yend = yend), inherit.aes = FALSE)+
geom_segment(data = lines_b_df[2,], color=mycols[1], size=0.5, alpha=0.5,  aes(x = x1, y = y1, xend = xend, yend = yend))+
geom_segment(data = lines_b_df[3,], color=mycols[1], size=0.5, alpha=0.5,  aes(x = x1, y = y1, xend = xend, yend = yend))+
geom_vline(aes(xintercept = c(-0.05,-2.58)),linetype="dotted",colour="gray",size=0.75)+
ylim(y_lim)+
xlab(x_axis_name)+ ylab(y_axis_name)+
theme(panel.background=element_rect(fill="white"), panel.grid=element_line(colour=NULL),panel.border=element_rect(fill=NA,colour="black"),axis.title=element_text(size=axis_title_size ,face="bold"),axis.text=element_text(size=6),legend.position = "none")
ggplot() +
geom_segment(data = lines_a_df[1,], color=mycols[3], size=0.75, alpha=1,  aes(x = x1, y = y1, xend = xend, yend = yend), inherit.aes = FALSE)+
geom_segment(data = lines_a_df[2,], color=mycols[3], size=0.5, alpha=0.5,  aes(x = x1, y = y1, xend = xend, yend = yend))+
geom_segment(data = lines_a_df[3,], color=mycols[3], size=0.5, alpha=0.5,  aes(x = x1, y = y1, xend = xend, yend = yend))+
geom_segment(data = lines_b_df[1,], color=mycols[1], size=0.75, alpha=1,  aes(x = x1, y = y1, xend = xend, yend = yend), inherit.aes = FALSE)+
geom_segment(data = lines_b_df[2,], color=mycols[1], size=0.5, alpha=0.5,  aes(x = x1, y = y1, xend = xend, yend = yend))+
geom_segment(data = lines_b_df[3,], color=mycols[1], size=0.5, alpha=0.5,  aes(x = x1, y = y1, xend = xend, yend = yend))+
geom_vline(aes(xintercept = c(-0.05,-2.58)),linetype="dotted",colour="gray",size=0.75)+
xlab(x_axis_name)+ ylab(y_axis_name)+
theme(panel.background=element_rect(fill="white"), panel.grid=element_line(colour=NULL),panel.border=element_rect(fill=NA,colour="black"),axis.title=element_text(size=axis_title_size ,face="bold"),axis.text=element_text(size=6),legend.position = "none")
geo_time_plot = ggplot() +
geom_segment(data = lines_a_df[1,], color=mycols[3], size=0.75, alpha=1,  aes(x = x1, y = y1, xend = xend, yend = yend), inherit.aes = FALSE)+
geom_segment(data = lines_a_df[2,], color=mycols[3], size=0.5, alpha=0.5,  aes(x = x1, y = y1, xend = xend, yend = yend))+
geom_segment(data = lines_a_df[3,], color=mycols[3], size=0.5, alpha=0.5,  aes(x = x1, y = y1, xend = xend, yend = yend))+
geom_segment(data = lines_b_df[1,], color=mycols[1], size=0.75, alpha=1,  aes(x = x1, y = y1, xend = xend, yend = yend), inherit.aes = FALSE)+
geom_segment(data = lines_b_df[2,], color=mycols[1], size=0.5, alpha=0.5,  aes(x = x1, y = y1, xend = xend, yend = yend))+
geom_segment(data = lines_b_df[3,], color=mycols[1], size=0.5, alpha=0.5,  aes(x = x1, y = y1, xend = xend, yend = yend))+
geom_vline(aes(xintercept = c(-0.05,-2.58)),linetype="dotted",colour="gray",size=0.75)+
xlab(x_axis_name)+ ylab(y_axis_name)+
theme(panel.background=element_rect(fill="white"), panel.grid=element_line(colour=NULL),panel.border=element_rect(fill=NA,colour="black"),axis.title=element_text(size=axis_title_size ,face="bold"),axis.text=element_text(size=6),legend.position = "none")
tiff("7_graphs/geosse_time_estimates.tiff", units="cm", width=7, height=6, res=600)
geo_time_plot
dev.off()
### loading estimates from the best-fit quasse model
lm_lin_params = read.table("6_quasse/lm_lin_params.csv", sep=",", h = T)
# setting the common parameters
common_params = lm_lin_params
### common values
x1 = rep(0, nrow(common_params))
xend = rep(max(hvolumes), nrow(common_params))
y_lim=c(0,1)
###  mean line
intercepts = common_params$l.c
angulars = common_params$l.m
lines = data.frame(x1, xend, y1= intercepts, yend= xend*angulars + intercepts)
### loading estimates from the best-fit quasse model
lm_lin_params = read.table("6_quasse/lm_lin_params.csv", sep=",", h = T)
# setting the common parameters
common_params = lm_lin_params
### common values
x1 = rep(0, nrow(common_params))
xend = rep(max(hvolumes), nrow(common_params))
### loading species' hypervolumes
spp_hvolumes = read.table("1_hypervolume_inference/spp_hvolumes.csv", h=T, sep=",")
# named vector of hypervolumes
hvolumes = spp_hvolumes$hvolume
names(hvolumes) = spp_hvolumes$species
### loading occurrence count per domain
spp_count_domain = read.table("0_data/spp_count_domain.csv", h=T, sep=",")
# define geographic states
high_ths = 0.9
low_ths = (1 - high_ths)
geo_states = af_percentage = spp_count_domain$AF/ apply(spp_count_domain[,-1], MARGIN = 1, FUN=sum)
geo_states[af_percentage >= high_ths] = "AF"
geo_states[af_percentage <= low_ths] = "other"
geo_states[af_percentage > low_ths & af_percentage < high_ths] = "AFother"
names(geo_states) = spp_count_domain$species
ep(max(sqrt(hvolumes) ), nrow(common_params))
rep(max(sqrt(hvolumes) ), nrow(common_params))
### common values
x1 = rep(0, nrow(common_params))
xend = rep(max(sqrt(hvolumes) ), nrow(common_params))
###  mean line
intercepts = common_params$l.c
angulars = common_params$l.m
lines = data.frame(x1, xend, y1= intercepts, yend= xend*angulars + intercepts)
# mean line
mean_line = apply(lines, MARGIN = 2, FUN= mean)
# se line
ci_line = apply(lines, MARGIN = 2, FUN= sd) /  sqrt(nrow(lines)) * 1.96
ci_line_up = mean_line + ci_line
ci_line_dw =  mean_line - ci_line
# dataframe with all lines
lines_df = data.frame(rbind(mean_line, ci_line_up, ci_line_dw))
# mean function to get lambda
get_lambda = function(x){ (mean(angulars)*x) + mean(intercepts)}
### hypervolume and lambda estimate per group
mean_hv = aggregate(hvolumes, by=list(geo_states), mean)
ci_hv = aggregate(hvolumes, by=list(geo_states), function(x){ 1.96*(sd(x)/ sqrt(length(x))) })
## getting lambda estimates
mean_lambda = get_lambda(mean_hv$x)
ci_lambda = get_lambda(ci_hv$x)
lambda_estimates = data.frame(mean_lambda, ci_lambda)
### plotting
# axis title size
axis_title_size = 10
# axis names
x_axis_name = "hypervolume size"
y_axis_name = "lambda"
ggplot() +
geom_segment(data = lines_df[1,], color="black", size=0.75, alpha=1,  aes(x = x1, y = y1, xend = xend, yend = yend), inherit.aes = FALSE)+
geom_segment(data = lines_df[2,], color="black", size=0.5, alpha=0.5,  aes(x = x1, y = y1, xend = xend, yend = yend))+
geom_segment(data = lines_df[3,], color="black", size=0.5, alpha=0.5,  aes(x = x1, y = y1, xend = xend, yend = yend))+
xlab(x_axis_name) + ylab(y_axis_name)+
theme(panel.background=element_rect(fill="white"), panel.grid=element_line(colour=NULL),panel.border=element_rect(fill=NA,colour="black"),axis.title=element_text(size=axis_title_size,face="bold"),axis.text=element_text(size=6),legend.position = "none")
qua_plot = ggplot() +
geom_segment(data = lines_df[1,], color="black", size=0.75, alpha=1,  aes(x = x1, y = y1, xend = xend, yend = yend), inherit.aes = FALSE)+
geom_segment(data = lines_df[2,], color="black", size=0.5, alpha=0.5,  aes(x = x1, y = y1, xend = xend, yend = yend))+
geom_segment(data = lines_df[3,], color="black", size=0.5, alpha=0.5,  aes(x = x1, y = y1, xend = xend, yend = yend))+
xlab(x_axis_name) + ylab(y_axis_name)+
theme(panel.background=element_rect(fill="white"), panel.grid=element_line(colour=NULL),panel.border=element_rect(fill=NA,colour="black"),axis.title=element_text(size=axis_title_size,face="bold"),axis.text=element_text(size=6),legend.position = "none")
tiff("7_graphs/quasse_estimates.tiff", units="cm", width=7, height=6, res=600)
qua_plot
dev.off()
#################### summarizing best model estimates #########################
best_fit_models = read.table("5_geosse_time/geosse_time_best_fit_models.csv", sep=",", h = T)
d_lin_params = read.table("5_geosse_time/d_lin_params.csv", sep=",",  h = T)
sd_s_lin_params = read.table("5_geosse_time/sd_s_lin_params.csv", sep=",",  h = T)
sxd_sx_lin_params = read.table("5_geosse_time/sxd_sx_lin_params.csv", sep=",", h = T)
### most common model
most_repeated = max(table(best_fit_models$model_name))
common_model = names(which(table(best_fit_models$model_name) == most_repeated) )
common_scenario = which(best_fit_models$model_name == common_model)
common_params = sd_s_lin_params[common_scenario,]
### descriptive statistics
apply(common_params, MARGIN = 2, FUN=mean)
apply(common_params, MARGIN = 2, FUN= function(x){ 1.96* ( sd(x)/sqrt( length(x) ) ) } )
most_repeated
names(which(table(best_fit_models$model_name) == most_repeated) )
table(best_fit_models$model_name)
common_params = sd_s_lin_params[common_scenario,]
common_params
### descriptive statistics
apply(common_params, MARGIN = 2, FUN=mean)
### descriptive statistics
apply(common_params, MARGIN = 2, FUN=mean)
apply(common_params, MARGIN = 2, FUN= function(x){ 1.96* ( sd(x)/sqrt( length(x) ) ) } )
